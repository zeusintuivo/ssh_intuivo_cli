#!/usr/bin/env bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#
function get_file_chmod() {
  #!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#


# Bash: Detect pipe/file input in a shell script
# REF: https://gist.github.com/davejamesmiller/1966557

# How to detect whether input is from keyboard, a file, or another process.
# Useful for writing a script that can read from standard input, or prompt the
# user for input if there is none.

# Source: http://www.linuxquestions.org/questions/linux-software-2/bash-scripting-pipe-input-to-script-vs.-1-570945/
PIPED="";
COLORED="";
COUNTER=0;
# ag -i filefoo /bar/
# ag [FILE-TYPE] [OPTIONS] PATTERN [PATH]
# ack [OPTION]... PATTERN [FILES OR DIRECTORIES]
# sift [OPTIONS] PATTERN [FILE|PATH|tcp://HOST:PORT]...
#  sift [OPTIONS] [-e PATTERN | -f FILE] [FILE|PATH|tcp://HOST:PORT]...
#  sift [OPTIONS] --targets [FILE|PATH]...
#      grep [-abcdDEFGHhIiJLlmnOopqRSsUVvwxZ] [-A num] [-B num] [-C[num]] [-e pattern] [-f file]
#          [--binary-files=value] [--color[=when]] [--colour[=when]] [--context[=num]]
#          [--label] [--line-buffered] [--null] [pattern] [file ...]
# In Bash you can also use test -t to check for a terminal:

if [ -t 0 ]; then
    # Terminal input (keyboard) - interactive
    PIPED=""
else
    # File or pipe input - non-interactive
    PIPED="YES"
    # REF: http://stackoverflow.com/questions/2746553/bash-script-read-values-from-stdin-pipe
    # read PIPED #TOOD Works on mac osx, pending to test in linux and windows
    PIPED=''
    # REF: https://stackoverflow.com/questions/7314044/use-bash-to-read-line-by-line-and-keep-space
    # REF: http://www.unix.com/shell-programming-and-scripting/58611-resetting-ifs-variable.html
    OLDIFS=$IFS            # resetting IFS variable
    IFS=''                 # to read line by line and keep space
    IFS= read -r ONEPIPE   # to avoid interpretation of backslashes.
    PIPED="${ONEPIPE}"
        [ -n "$PIPED" ] && COUNTER=$((COUNTER+1))

    while read ONEPIPE
    do

         PIPED="${PIPED}
${ONEPIPE}"
         COUNTER=$((COUNTER+1))
    done
        if [ $COUNTER -eq 0 ]; then
          IFS=$OLDIFS
          exit
        fi

    #action="${ONEPIPE/ /‚Éù}"  # replace value inside string substitution expresion bash
    # TEST: echo "COUNTER: ${COUNTER}";echo "PIDED: ${PIPED}"; exit 0;
    IFS=$OLDIFS
fi
# Piped Input
#if [ -n "$PIPED" ]
# then
# echo "this is pipe..die "
# exit 0;
#fi
# NOT Piped Input
#if [ -z "$PIPED" ]
# then
# echo "this NOT pipe..die "
# exit 0;
#fi
#echo "PIPED:$PIPED";
#exit;

# ALTERNATIVE:
#if readlink /proc/$$/fd/0 | grep -q "^pipe:"; then
    # Pipe input (echo abc | myscript)
#    PIPED="YES"
#elif file $( readlink /proc/$$/fd/0 ) | grep -q "character special"; then
    # Terminal input (keyboard)
#    PIPED=""
#else
    # File input (myscript < file.txt)
#    PIPED=""

#fi


# CURRENT SCRIPT EXECUTING
THISSCRIPTNAME=`basename "$0"`


# PIPED ? - END

# ARGUMENTS ? - Start

# check to see if I used a message, then it will behave as a put
# bash shell script check input argument
FILENAME=""
VERBOSE=""
# Yes argument, not piped
if [ -n "$1" ] && [ -z "$PIPED" ]
  then
  {
    if [[ "$1" == "-v" ]] ;
      then
        VERBOSE="ON"
      else
        FILENAME="$1";
     fi
  }
fi
# Yes argument, yes piped
if [ -n "$1" ] && [ -n "$PIPED" ]
  then
  {
    if [[ "$1" == "-v" ]] ;
      then
        VERBOSE="ON"
    fi
    FILENAME="${PIPED}";
  }
fi

# Not argument, yes piped
if [ -z "$1" ] && [ -n "$PIPED" ]
  then
  {
    FILENAME="${PIPED}";
  }
fi
# Not argument, not Piped
if [ -z "$1" ] && [ -z "$PIPED" ]
  then
  {
    echo " "
    echo " 'Get the chmod numerical value for a file' REF: http://unix.stackexchange.com/questions/46915/get-the-chmod-numerical-value-for-a-file"
    echo "Missing 1st argument "
    echo " "
    echo "Sample Usage:    - expects one argument  *required"
    echo " "
    echo "    ${THISSCRIPTNAME}    filename [-v] for verbose"
    echo "    "
    echo "Pick one: "
    echo "    "
    ls
    exit 1;
  }
fi

# Yes argument, not piped
if [ -n "$2" ]
  then
  {
    if [[ "$2" == "-v" ]] ;
      then
        VERBOSE="ON"
     fi
  }
fi
# ARGUMENTS ? - END

# WHICH SYSTEM AND TAKE ACTION ? - Start
# check operation systems
(
  if [[ "$(uname)" == "Darwin" ]] ; then
    # Do something under Mac OS X platform
    while read -r ONE_FILENAME; do
      # if not empty
      PERMISIONS=""
      if [ -n "${ONE_FILENAME}" ] ; then
        PERMISIONS=$(stat -f "%OLp" "${ONE_FILENAME}")
      fi
      if [[ "${VERBOSE}" == "ON" ]] ;
        then
          {
            echo "${PERMISIONS} ${ONE_FILENAME}"
          }
        else
          {
            echo "${PERMISIONS}"
          }
      fi
    done <<< "${FILENAME}"

  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]] ; then
    # Do something under GNU/Linux platform
    while read -r ONE_FILENAME; do
      # if not empty
      PERMISIONS=""
      if [ -n "${ONE_FILENAME}" ] ; then
        PERMISIONS=$(stat --format '%a' "${ONE_FILENAME}")
      fi
      if [[ "${VERBOSE}" == "ON" ]] ;
        then
          {
            echo "${PERMISIONS} ${ONE_FILENAME}"
          }
        else
          {
            echo "${PERMISIONS}"
          }
      fi
    done <<< "${FILENAME}"

  elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ; then
    # Do something under Windows NT platform
     echo "Not learned yet. nothing"
    # nothing here
  fi
)
# WHICH SYSTEM AND TAKE ACTION ? - END

} # end get_file_chmod


# 18:  SIMPLE helloworld echo -e "\033[38;5;18m FOREGROUND   "; echo -e "\033[48;5;18m BACKGROUND   "
# 19:  SIMPLE helloworld echo -e "\033[38;5;19m FOREGROUND   "; echo -e "\033[48;5;19m BACKGROUND   "
# 20:  SIMPLE helloworld echo -e "\033[38;5;20m FOREGROUND   "; echo -e "\033[48;5;20m BACKGROUND   "
# 21:  SIMPLE helloworld echo -e "\033[38;5;21m FOREGROUND   "; echo -e "\033[48;5;21m BACKGROUND   "
# 25:  SIMPLE helloworld echo -e "\033[38;5;25m FOREGROUND   "; echo -e "\033[48;5;25m BACKGROUND   "
# 26:  SIMPLE helloworld echo -e "\033[38;5;26m FOREGROUND   "; echo -e "\033[48;5;26m BACKGROUND   "
# 27:  SIMPLE helloworld echo -e "\033[38;5;27m FOREGROUND   "; echo -e "\033[48;5;27m BACKGROUND   "
# 32:  SIMPLE helloworld echo -e "\033[38;5;32m FOREGROUND   "; echo -e "\033[48;5;32m BACKGROUND   "
# 33:  SIMPLE helloworld echo -e "\033[38;5;33m FOREGROUND   "; echo -e "\033[48;5;33m BACKGROUND   "
# 38:  SIMPLE helloworld echo -e "\033[38;5;38m FOREGROUND   "; echo -e "\033[48;5;38m BACKGROUND   "
# 39:  SIMPLE helloworld echo -e "\033[38;5;39m FOREGROUND   "; echo -e "\033[48;5;39m BACKGROUND   "
# 45:  SIMPLE helloworld echo -e "\033[38;5;45m FOREGROUND   "; echo -e "\033[48;5;45m BACKGROUND   "

  load_struct_testing_wget() {
      local provider="$HOME/_/clis/execute_command_intuivo_cli/struct_testing"
      [[   -e "${provider}"  ]] && source "${provider}" && (( DEBUG )) && echo  "struct_testing Loaded locally"
      [[ ! -e "${provider}"  ]] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
      ( ( ! command -v passed >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 69; )
      return 0
  } # end load_struct_testing_wget

if [ -z "$PIPED" ] ; then
{
  echo -en "${RESET}\033[38;5;246m" 2>&1


  # -- SUDO START
  if [[ "${USER}" == 'root' || "${LOGNAME}" == 'root' ]] ; then
  {
    if [[ -n "${SUDO_USER}" && "${SUDO_USER}" != 'root' ]] ; then
    {
      echo -e "\033[38;5;20m Suddoed-in from ${SUDO_USER} ! "
    }
    else
    {
      echo -e "\033[38;5;18m Error"
      echo " "
      echo -e "\033[38;5;19m  Must run this as a 'USER' not from root "
      echo " "
      echo -e "\033[38;5;20m  expected be run by a user with SUDO rights "
      exit 1
    }
    fi
  }
  fi
  if  ( env | grep "SUDO_USER"  &>/dev/null  ) || [[ -z "${SUDO_USER}" ]] ; then
  {
    echo "Give password for ${USER} to get sudo access."
    sudo echo -n "Hey! sudo "
    echo -e "\033[38;0m "
    # USER=root
    # SHELL=/bin/sh
    # SUDO_COMMAND=/usr/bin/env
    # SUDO_USER=zeus
    # SUDO_UID=501
    # SUDO_GID=20
    # echo UID=$(sudo id -u $(logname))
    SUDO_USER="${USER}"
    SUDO_UID="${UID}"
    LOGNAME="root"
    USER="root"
    # sudo env | grep SUDO
    # sudo env | grep LOGNAME
    # sudo env | grep USER
    # sudo env | grep UID
    echo -e "Suddoed in from ${SUDO_USER} "
  }
  else
  {
    echo -e "\033[38;5;18m Error"
    echo " "
    echo -e "\033[38;5;19m  SUDO_USER exists! from some weird reason but is not root"
    echo " "
    echo -e "\033[38;5;20m  this is strange. I cannot proceed like this. "
    exit 1
  }
  fi
  SUDOS="$(sudo env | grep SUDO_USER)"
  load_struct_testing_wget
  USER_HOME="${HOME}"
}
else
{
  load_struct_testing_wget
}
fi

enforce_variable_with_value USER_HOME "${USER_HOME}"

# USER=root
# SHELL=/bin/sh
# SUDO_COMMAND=/usr/bin/env
# SUDO_USER=zeus
# SUDO_UID=501
# SUDO_GID=20
enforce_variable_with_value USER "${USER}"
enforce_variable_with_value SHELL "${SHELL}"
enforce_variable_with_value LOGNAME "${LOGNAME}"
enforce_variable_with_value SUDO_USER "${SUDO_USER}"
enforce_variable_with_value SUDO_UID "${SUDO_UID}"
# enforce_variable_with_value SUDO_GID "${SUDO_GID}"
# -- SUDO END

# echo -e "\033[38;5;45m FOREGROUND   "; echo -e "\033[48;5;45m BACKGROUND   "
# cd ${USER_HOME}/
EXECUTEOWD=$(pwd)
(( DEBUG )) && echo "${EXECUTEOWD}"
[[ -f "${EXECUTEOWD}/.temp_keys" ]] && (( DEBUG )) &&  echo "I found it "
[[ -f "${EXECUTEOWD}/.temp_keys" ]] &&  . "${EXECUTEOWD}/.temp_keys"


if [[ -n "${VPNREQUIRED}" ]] ;  then
{
  if (enforce_vpn_is_on "${VPNREQUIRED}") ; then  {
    echo Connected to VPN
  }
  else
  {
    echo ERROR VPN IS NOT ON and is REQUIRED to authenticate
    # [ $? -gt 0 ] && failed To connect before push  && exit 1
  }
  fi
}
fi

FLAGGITPROVIDER=1
if [[ -n "${GITPROVIDER}" ]] ;  then
{
  if (enforce_web_is_reachable  "${GITPROVIDER}") ; then {
    # set -x
    # set +x
    echo Reached "${GITPROVIDER}"
  }
  else
  {
    FLAGGITPROVIDER=0
    echo ERROR COULD reach GIT provider and required to authenticate ssh
    # [ $? -gt 0 ] && failed To connect git provider push  && exit 1
  }
  fi
}
fi


(( DEBUG )) && echo -e "\033[38;5;20m"  2>&1
cd "${USER_HOME}/.ssh/"
#mkdir -p ${USER_HOME}/.ssh/
sudo chmod 700 "${USER_HOME}/.ssh/"
[[ -e "${USER_HOME}/.ssh/" ]] && sudo chown -R "${SUDO_USER}" "${USER_HOME}/.ssh/"

[[ ! -d "${USER_HOME}/.ssh/" ]] && echo -e "\033[38;5;19m\n  Error ${USER_HOME}/.ssh/ does not exist \n "
KEYLIST=$(ls *.pub | sed 's/id_rsa.pub//' | sed 's/_rsa.pub//')
enforce_variable_with_value KEYLIST $KEYLIST


PROVIDED_USER=""
if [[  -n "${1}" ]] ;  then
{
  PROVIDED_USER="${1}"
}
else
{
	echo -e "\033[38;5;18m Error"
	echo " "
	echo -e "\033[38;5;19m  ssh_generatekeys username    "
	echo " "
	echo -e "\033[38;5;20m  expected"
	echo -e "\033[38;5;21m \n Pick from key on the list: \n ${KEYLIST} \n"
	echo " "
	enforce_variable_with_value PROVIDED_USER "${PROVIDED_USER}"
	exit 1
}
fi






OUTPUT_FOLDER="$(pwd)"
(( DEBUG )) && echo -e "\033[38;5;25m" 2>&1
[[ ! -f "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" ]] && echo -e "\n  Error this key does not exist. Pick from key on the list: \n ${KEYLIST} \n" && exit 1


# _2048
[[ -e "${OUTPUT_FOLDER}/id_rsa2048.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_rsa2048.pub"
[[ -e "${OUTPUT_FOLDER}/id_rsa2048" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_rsa2048"
[[ -e "${OUTPUT_FOLDER}/id_rsa2048.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_rsa2048.pub"
[[ -e  "${OUTPUT_FOLDER}/id_rsid_rsa2048a" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_rsid_rsa2048a"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub" "${OUTPUT_FOLDER}/id_rsa2048.pub"
[[ -e "${OUTPUT_FOLDER}/id_rsa2048" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048" "${OUTPUT_FOLDER}/id_rsa2048"

# _rsa _4096
[[ -e "${OUTPUT_FOLDER}/id_rsa.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_rsa.pub"
[[ -e "${OUTPUT_FOLDER}/id_rsa" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_rsa"
[[ -e "${OUTPUT_FOLDER}/id_rsa.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_rsa.pub"
[[ -e "${OUTPUT_FOLDER}/id_rsa" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_rsa"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub" "${OUTPUT_FOLDER}/id_rsa.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" "${OUTPUT_FOLDER}/id_rsa"

# _ed25519
[[ -e "${OUTPUT_FOLDER}/id_ed25519.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ed25519.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ed25519"
[[ -e "${OUTPUT_FOLDER}/id_ed25519.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub" "${OUTPUT_FOLDER}/id_ed25519.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519" "${OUTPUT_FOLDER}/id_ed25519"

# _ed25519_sk
[[ -e "${OUTPUT_FOLDER}/id_ed25519_sk.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ed25519_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_sk" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ed25519_sk"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_sk.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_sk" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_sk"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub" "${OUTPUT_FOLDER}/id_ed25519_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk" "${OUTPUT_FOLDER}/id_ed25519_sk"

# _ecdsa_sk
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ecdsa_sk"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ecdsa_sk"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub" "${OUTPUT_FOLDER}/id_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk" "${OUTPUT_FOLDER}/id_ecdsa_sk"

[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ecdsa_sk"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ecdsa_sk"

# _ed25519_fido2
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ed25519_fido2"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_fido2"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub" "${OUTPUT_FOLDER}/id_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2" ]] && sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2" "${OUTPUT_FOLDER}/id_ed25519_fido2"

[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2.pub" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2" ]] && sudo chmod 700 "${OUTPUT_FOLDER}/id_ed25519_fido2"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_fido2"

(( DEBUG )) && echo chmod 1 get_file_chmod "${OUTPUT_FOLDER}"
get_file_chmod "${OUTPUT_FOLDER}"  &>/dev/null
(( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}"
(( DEBUG )) && echo chmod 2 get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"  &>/dev/null
(( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
(( DEBUG )) && echo chmod 3  get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"  &>/dev/null
(( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
(( DEBUG )) && echo sudo cat "${OUTPUT_FOLDER}/id_rsa.pub"
(( DEBUG )) && sudo cat "${OUTPUT_FOLDER}/id_rsa.pub"
# REF: https://www.shellhacks.com/regex-find-email-addresses-file-grep/
GET_EMAIL_FROM_PUB_KEY=$(sudo cat "${OUTPUT_FOLDER}/id_rsa.pub" | grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b")
if [[ -z "${GET_EMAIL_FROM_PUB_KEY}"  ]] ; then
{
GET_EMAIL_FROM_PUB_KEY="$(sudo cat "${OUTPUT_FOLDER}/id_rsa.pub" | cut -d ' ' -f3 )"
}
fi
enforce_variable_with_value GET_EMAIL_FROM_PUB_KEY "${GET_EMAIL_FROM_PUB_KEY}"

GET_USERNAME_FROM_EMAIL=$(echo "${GET_EMAIL_FROM_PUB_KEY}" | grep -E -o "\b[A-Za-z0-9._%+-]+\b" | head -1 )
enforce_variable_with_value GET_USERNAME_FROM_EMAIL "${GET_USERNAME_FROM_EMAIL}"

USERNAME="${GET_USERNAME_FROM_EMAIL}"
enforce_variable_with_value USERNAME "${USERNAME}"
(( DEBUG )) && echo -e "\033[38;5;26m" 2>&1
(( DEBUG )) && echo "${USERNAME}";
#ssh -vT git@github.com
[[ -e "${OUTPUT_FOLDER}/id_rsa2048.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/id_rsa2048.pub"
[[ -e "${OUTPUT_FOLDER}/id_rsa2048" ]] && sudo chmod 600 "${OUTPUT_FOLDER}/id_rsa2048"
[[ -e "${OUTPUT_FOLDER}/id_rsa.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/id_rsa.pub"
[[ -e "${OUTPUT_FOLDER}/id_rsa" ]] && sudo chmod 600 "${OUTPUT_FOLDER}/id_rsa"
[[ -e "${OUTPUT_FOLDER}/id_ed25519.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/id_ed25519.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519" ]] && sudo chmod 600 "${OUTPUT_FOLDER}/id_ed25519"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_sk.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/id_ed25519_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_sk" ]] && sudo chmod 600 "${OUTPUT_FOLDER}/id_ed25519_sk"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/id_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk" ]] && sudo chmod 600 "${OUTPUT_FOLDER}/id_ecdsa_sk"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/id_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2" ]] && sudo chmod 600 "${OUTPUT_FOLDER}/id_ed25519_fido2"
# Assuming USER is root with sudo
[[ -e "${OUTPUT_FOLDER}/id_rsa2048.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_rsa2048.pub"
[[ -e "${OUTPUT_FOLDER}/id_rsa2048" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_rsa2048"
[[ -e "${OUTPUT_FOLDER}/id_rsa.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_rsa.pub"
[[ -e "${OUTPUT_FOLDER}/id_rsa" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_rsa"
[[ -e "${OUTPUT_FOLDER}/id_ed25519.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_sk.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_sk" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_sk"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/id_ecdsa_sk" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ecdsa_sk"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2.pub" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/id_ed25519_fido2" ]] && sudo chown -R "${SUDO_USER}" "${OUTPUT_FOLDER}/id_ed25519_fido2"



# (( DEBUG )) && enforce_variable_with_value GITPROVIDER "${GITPROVIDER}"
          if ( typeset -p "GITPROVIDER"  &>/dev/null ) &&  [ -n "${GITPROVIDER+x}" ] ; then
          {
            (( DEBUG )) && echo -e "${LIGHTGREEN} ‚úî ${LIGHTYELLOW} ${GITPROVIDER} is given "
            TEST_GIT=""
            (( FLAGGITPROVIDER )) && (( DEBUG )) && echo "ssh -T ${GITPROVIDER}"
            (( FLAGGITPROVIDER )) && TEST_GIT=$(ssh -T "${GITPROVIDER}" 2>&1) #  Pipe both stderr and  stdout to variable
            (( DEBUG )) && echo "${TEST_GIT}"
            (( DEBUG )) && echo chmod 1 get_file_chmod "${OUTPUT_FOLDER}"
            get_file_chmod "${OUTPUT_FOLDER}"  &>/dev/null
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}"
            (( DEBUG )) && echo chmod 2 get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"  &>/dev/null
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            (( DEBUG )) && echo chmod 3  get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"  &>/dev/null
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
          }
          else
          {
            TEST_GIT=""
            (( FLAGGITPROVIDER )) && (( DEBUG )) && echo "ssh -T ${GITPROVIDER}"
            (( FLAGGITPROVIDER )) &&  TEST_GIT=$(ssh -T git@github.com 2>&1) #  Pipe both stderr and  stdout to variable
            (( DEBUG )) && echo chmod 1 get_file_chmod "${OUTPUT_FOLDER}"
            get_file_chmod "${OUTPUT_FOLDER}" &>/dev/null
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}"
            (( DEBUG )) && echo chmod 2 get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub" &>/dev/null
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            (( DEBUG )) && echo chmod 3  get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub" &>/dev/null
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"

 (( DEBUG )) &&  echo -e "\033[38;5;38m" 2>&1
 (( FLAGGITPROVIDER )) &&  (( DEBUG )) && echo "${TEST_GIT}"
 (( FLAGGITPROVIDER )) &&   enforce_variable_with_value TEST_GIT $TEST_GIT

          }
          fi
            function cpy {
            # REF: https://superuser.com/questions/472598/pbcopy-for-windows
            # I'm using the Git Bash command shell for Windows, and as someone noted above,
            # using clip is very annoying, because it also copies the carriage return at the
            # end of the output of any command. So I wrote this function to address it:
            #
            # So for example:
            #
            # $ pwd | cpy  # copies directory path
            #
            # $ git branch | cpy # copies current branch of git repo to clipboard
            #
            while read data; do     # reads data piped in to cpy
                echo "$data" | cat > /dev/clipboard     # echos the data and writes that to /dev/clipboard
            done
            tr -d '\n' < /dev/clipboard > /dev/clipboard     # removes new lines from the clipboard
            } # end cpy


	# check operation systems
	if [[ "$(uname)" == "Darwin" ]] ; then
  {
	  # Do something under Mac OS X platform
	  (( DEBUG )) && echo -e "\033[38;5;26m Stopping All SSH. It is expected to restart."
	  (( DEBUG )) && echo -e "\033[38;5;27m"
	  sudo launchctl stop com.openssh.sshd
	  wait
	  (( DEBUG )) && echo -e "\033[38;5;32m"
	  sudo killall sshd 2>/dev/null
	  wait
	  (( DEBUG )) && echo "Removing all Keys added to the agent."
	  sudo ssh-add -D
	  wait
	  (( DEBUG )) && echo -e "\033[38;5;33m"
	  (( DEBUG )) && echo "Adding just the only key we want to use."
	  [[ -e "${OUTPUT_FOLDER}/id_rsa2048" ]] && sudo ssh-add -K "${OUTPUT_FOLDER}/id_rsa2048"
    [[ -e "${OUTPUT_FOLDER}/id_rsa" ]] && sudo ssh-add -K "${OUTPUT_FOLDER}/id_rsa"
    [[ -e "${OUTPUT_FOLDER}/_ed25519" ]] && sudo ssh-add -K "${OUTPUT_FOLDER}/_ed25519"
    [[ -e "${OUTPUT_FOLDER}/_ed25519_sk" ]] && sudo ssh-add -K "${OUTPUT_FOLDER}/_ed25519_sk"
    [[ -e "${OUTPUT_FOLDER}/_ed25519_fido2" ]] && sudo ssh-add -K "${OUTPUT_FOLDER}/_ed25519_fido2"
    [[ -e "${OUTPUT_FOLDER}/_ecdsa_sk" ]] && sudo ssh-add -K "${OUTPUT_FOLDER}/_ecdsa_sk"

     (( FLAGGITPROVIDER )) &&  [[ "${TEST_GIT}" ==  *"Permission denied"* ]] && $(pbcopy < ${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub)  && echo "------ Key Needs to be added in WebPAGE. Copied to CLipboard"
  }
	elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]] ; then
  {
	  # Do something under GNU/Linux platform
	  # ubuntu lsb_release -i | sed 's/Distributor\ ID://g' = \tUbuntu\n
    echo "xclip -sel clip < ${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub"
    xclip -sel clip < "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub"
     (( FLAGGITPROVIDER )) &&  [[ "${TEST_GIT}" ==  *"Permission denied"* ]] && $(xclip -sel clip < ${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub)  && echo "------ Key Needs to be added in WebPAGE. Copied to CLipboard"
    # (( FLAGGITPROVIDER )) &&  echo "no xclip"
  }
	elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ; then
  {
	  # Do something under Windows NT platform
     (( FLAGGITPROVIDER )) &&  [[ "${TEST_GIT}" ==  *"Permission denied"* ]] && $(cat ${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub | cpy)  && echo "------ Key Needs to be added in WebPAGE. Copied to CLipboard"
	  # cat ${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub | cpy
	  # cat ${USER_HOME}/.ssh/id_rsa.pub | clip
	  # nothing here
  }
	fi

# Assuming USER is root with sudo
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048" ]] && sudo chmod 400 "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" ]] && sudo chmod 400 "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519" ]] && sudo chmod 400 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk" ]] && sudo chmod 400 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2" ]] && sudo chmod 400 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub" ]] && sudo chmod 644 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk" ]] && sudo chmod 400 "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk"

[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa2048.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_sk"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ed25519_fido2"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk.pub"
[[ -e "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk" ]] && sudo chown -R "${USER}" "${OUTPUT_FOLDER}/${PROVIDED_USER}_ecdsa_sk"
if  (( FLAGGITPROVIDER )) &&  [[ "${TEST_GIT}" ==  *"successfully authenticated"* ]] ; then
{
  GET_USERNAME_FROM_GREETING=$(echo "${TEST_GIT%\!*}" | sed -e 's/Hi //')
  enforce_variable_with_value GET_USERNAME_FROM_GREETING $GET_USERNAME_FROM_GREETING
  USERNAME="${GET_USERNAME_FROM_GREETING}"
  enforce_variable_with_value USERNAME "${USERNAME}"
}
fi

echo -en "\033[38;5;39m" 2>&1
git config --global user.email "${GET_EMAIL_FROM_PUB_KEY}"
echo -en "\033[38;5;45m" 2>&1
git config --global user.name "${USERNAME}"
echo -en "\033[38;5;51m" 2>&1
OUTPUT_GITCONFIG="$(git config --global -l )"
echo -n "$OUTPUT_GITCONFIG" | grep "user."
(( DEBUG )) && sudo ssh-add -l
echo -en "\033[0m" 2>&1
# git config -l
#
# echo " "
# echo "ls -la ${OUTPUT_FOLDER}"
# echo " "
# ls -la ${OUTPUT_FOLDER}
