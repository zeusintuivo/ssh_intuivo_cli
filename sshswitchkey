#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
# 


load_struct_testing_wget(){
    local provider="$HOME/_/clis/execute_command_intuivo_cli/struct_testing"
    [   -e "${provider}"  ] && source "${provider}" && echo  "Loaded locally"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v passed >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 69; )
} # end load_struct_testing_wget
load_struct_testing_wget

USER_HOME=$HOME
enforce_variable_with_value USER_HOME "$USER_HOME"

# 18:  SIMPLE helloworld echo -e "\033[38;5;18m FOREGROUND   "; echo -e "\033[48;5;18m BACKGROUND   "
# 19:  SIMPLE helloworld echo -e "\033[38;5;19m FOREGROUND   "; echo -e "\033[48;5;19m BACKGROUND   "
# 20:  SIMPLE helloworld echo -e "\033[38;5;20m FOREGROUND   "; echo -e "\033[48;5;20m BACKGROUND   "
# 21:  SIMPLE helloworld echo -e "\033[38;5;21m FOREGROUND   "; echo -e "\033[48;5;21m BACKGROUND   "
# 25:  SIMPLE helloworld echo -e "\033[38;5;25m FOREGROUND   "; echo -e "\033[48;5;25m BACKGROUND   "
# 26:  SIMPLE helloworld echo -e "\033[38;5;26m FOREGROUND   "; echo -e "\033[48;5;26m BACKGROUND   "
# 27:  SIMPLE helloworld echo -e "\033[38;5;27m FOREGROUND   "; echo -e "\033[48;5;27m BACKGROUND   "
# 32:  SIMPLE helloworld echo -e "\033[38;5;32m FOREGROUND   "; echo -e "\033[48;5;32m BACKGROUND   "
# 33:  SIMPLE helloworld echo -e "\033[38;5;33m FOREGROUND   "; echo -e "\033[48;5;33m BACKGROUND   "
# 38:  SIMPLE helloworld echo -e "\033[38;5;38m FOREGROUND   "; echo -e "\033[48;5;38m BACKGROUND   "
# 39:  SIMPLE helloworld echo -e "\033[38;5;39m FOREGROUND   "; echo -e "\033[48;5;39m BACKGROUND   "
# 45:  SIMPLE helloworld echo -e "\033[38;5;45m FOREGROUND   "; echo -e "\033[48;5;45m BACKGROUND   "
echo -en "${RESET}\033[38;5;246m" 2>&1
(( DEBUG )) && sudo echo "Hey!" 
#echo -e "\033[38;5;45m FOREGROUND   "; echo -e "\033[48;5;45m BACKGROUND   "
#cd ${USER_HOME}/
EXECUTEOWD=$(pwd)
(( DEBUG )) && echo $EXECUTEOWD
[ -f "$EXECUTEOWD/.temp_keys" ] && (( DEBUG )) &&  echo "I found it "
[ -f "$EXECUTEOWD/.temp_keys" ] &&  . "$EXECUTEOWD/.temp_keys"

(( DEBUG )) && echo -e "\033[38;5;20m"  2>&1
cd ${USER_HOME}/.ssh/
#mkdir -p ${USER_HOME}/.ssh/
sudo chmod 700 ${USER_HOME}/.ssh/

[ ! -d ${USER_HOME}/.ssh/ ] && echo -e "\033[38;5;19m\n  Error ${USER_HOME}/.ssh/ does not exist \n "
KEYLIST=$(ls *.pub | sed 's/id_rsa.pub//' | sed 's/_rsa.pub//')
enforce_variable_with_value KEYLIST $KEYLIST


PROVIDED_USER=""
if [ ! -z "${1}" ] ;  then
    PROVIDED_USER="${1}"
else
	echo -e "\033[38;5;18m Error"
	echo " "
	echo -e "\033[38;5;19m  ssh_generatekeys username    "
	echo " "
	echo -e "\033[38;5;20m  expected"
	echo -e "\033[38;5;21m \n Pick from key on the list: \n ${KEYLIST} \n"
	echo " "
	enforce_variable_with_value PROVIDED_USER $PROVIDED_USER
	exit 1
fi






OUTPUT_FOLDER=$(pwd)
(( DEBUG )) && echo -e "\033[38;5;25m" 2>&1
[ ! -f "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" ] && echo -e "\n  Error this key does not exist. Pick from key on the list: \n ${KEYLIST} \n" && exit 1
sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa" "${OUTPUT_FOLDER}/id_rsa"
sudo cp "${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub" "${OUTPUT_FOLDER}/id_rsa.pub"

sudo chmod 700 "${OUTPUT_FOLDER}/id_rsa.pub"
sudo chmod 700 "${OUTPUT_FOLDER}/id_rsa"

(( DEBUG )) && echo chmod 1 get_file_chmod "${OUTPUT_FOLDER}"
get_file_chmod "${OUTPUT_FOLDER}"  &>/dev/null 
(( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}"
(( DEBUG )) && echo chmod 2 get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"  &>/dev/null 
(( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
(( DEBUG )) && echo chmod 3  get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"  &>/dev/null 
(( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
(( DEBUG )) && echo sudo cat "${OUTPUT_FOLDER}/id_rsa.pub" 
(( DEBUG )) && sudo cat "${OUTPUT_FOLDER}/id_rsa.pub" 
# REF: https://www.shellhacks.com/regex-find-email-addresses-file-grep/
GET_EMAIL_FROM_PUB_KEY=$(sudo cat "${OUTPUT_FOLDER}/id_rsa.pub" | grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b")
enforce_variable_with_value GET_EMAIL_FROM_PUB_KEY $GET_EMAIL_FROM_PUB_KEY

GET_USERNAME_FROM_EMAIL=$(echo "${GET_EMAIL_FROM_PUB_KEY}" | grep -E -o "\b[A-Za-z0-9._%+-]+\b" | head -1 )
enforce_variable_with_value GET_USERNAME_FROM_EMAIL $GET_USERNAME_FROM_EMAIL

USERNAME="${GET_USERNAME_FROM_EMAIL}"
enforce_variable_with_value USERNAME $USERNAME
(( DEBUG )) && echo -e "\033[38;5;26m" 2>&1
(( DEBUG )) && echo "$USERNAME";
#ssh -vT git@github.com
sudo chmod 400 "${OUTPUT_FOLDER}/id_rsa.pub"
sudo chmod 400 "${OUTPUT_FOLDER}/id_rsa"


(( DEBUG )) && enforce_variable_with_value GITPROVIDER $GITPROVIDER
          if ( typeset -p "GITPROVIDER"  &>/dev/null ) &&  [ -n "${GITPROVIDER+x}" ] ; then
          {
              (( DEBUG )) && echo -e "${LIGHTGREEN} âœ” ${LIGHTYELLOW} ${GITPROVIDER} is given "

            TEST_GIT=$(ssh -T "${GITPROVIDER}" 2>&1) #  Pipe both stderr and  stdout to variable
            (( DEBUG )) && echo "${TEST_GIT}"
           
            (( DEBUG )) && echo chmod 1 get_file_chmod "${OUTPUT_FOLDER}"
            get_file_chmod "${OUTPUT_FOLDER}"  &>/dev/null 
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}" 
            (( DEBUG )) && echo chmod 2 get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"  &>/dev/null 
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub" 
            (( DEBUG )) && echo chmod 3  get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"  &>/dev/null 
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub" 
          } 
          else 
          {

            TEST_GIT=$(ssh -T git@github.com 2>&1) #  Pipe both stderr and  stdout to variable
            (( DEBUG )) && echo chmod 1 get_file_chmod "${OUTPUT_FOLDER}"
            get_file_chmod "${OUTPUT_FOLDER}" &>/dev/null
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}"
            (( DEBUG )) && echo chmod 2 get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub" &>/dev/null
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            (( DEBUG )) && echo chmod 3  get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"
            get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub" &>/dev/null
            (( DEBUG )) && get_file_chmod "${OUTPUT_FOLDER}/id_rsa.pub"

 (( DEBUG )) &&  echo -e "\033[38;5;38m" 2>&1
(( DEBUG )) && echo "${TEST_GIT}"
 enforce_variable_with_value TEST_GIT $TEST_GIT

          }
          fi
            function cpy {
            # REF: https://superuser.com/questions/472598/pbcopy-for-windows
            # I'm using the Git Bash command shell for Windows, and as someone noted above, 
            # using clip is very annoying, because it also copies the carriage return at the 
            # end of the output of any command. So I wrote this function to address it:
            # 
            # So for example:
            #
            # $ pwd | cpy  # copies directory path
            #
            # $ git branch | cpy # copies current branch of git repo to clipboard
            #
            while read data; do     # reads data piped in to cpy
                echo "$data" | cat > /dev/clipboard     # echos the data and writes that to /dev/clipboard
            done
            tr -d '\n' < /dev/clipboard > /dev/clipboard     # removes new lines from the clipboard
            } # end cpy


	# check operation systems
	if [[ "$(uname)" == "Darwin" ]] ; then
	  # Do something under Mac OS X platform
	  (( DEBUG )) && echo -e "\033[38;5;26m Stopping All SSH. It is expected to restart."
	  (( DEBUG )) && echo -e "\033[38;5;27m"
	  sudo launchctl stop com.openssh.sshd
	  wait
	  (( DEBUG )) && echo -e "\033[38;5;32m"
	  sudo killall sshd 2>/dev/null
	  wait
	  (( DEBUG )) && echo "Removing all Keys added to the agent."
	  sudo ssh-add -D   
	  wait
	  (( DEBUG )) && echo -e "\033[38;5;33m"
	  (( DEBUG )) && echo "Adding just the only key we want to use."
	  sudo ssh-add -K ${OUTPUT_FOLDER}/id_rsa

    [[ "${TEST_GIT}" ==  *"Permission denied"* ]] && $(pbcopy < ${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub)  && echo "------ Key Needs to be added in WebPAGE. Copied to CLipboard"
	elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]] ; then
	  # Do something under GNU/Linux platform
	  # ubuntu lsb_release -i | sed 's/Distributor\ ID://g' = \tUbuntu\n
    # [[ "${TEST_GIT}" ==  *"Permission denied"* ]] && $(xclip -sel clip < ${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub)  && echo "------ Key Needs to be added in WebPAGE. Copied to CLipboard"
    echo "no xclip"
	elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ; then
	  # Do something under Windows NT platform
    [[ "${TEST_GIT}" ==  *"Permission denied"* ]] && $(cat ${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub | cpy)  && echo "------ Key Needs to be added in WebPAGE. Copied to CLipboard"
	  # cat ${OUTPUT_FOLDER}/${PROVIDED_USER}_rsa.pub | cpy
	  # cat ${USER_HOME}/.ssh/id_rsa.pub | clip
	  # nothing here
	fi

if [[ "${TEST_GIT}" ==  *"successfully authenticated"* ]] ; then 
{
  GET_USERNAME_FROM_GREETING=$(echo "${TEST_GIT%\!*}" | sed -e 's/Hi //') 
  enforce_variable_with_value GET_USERNAME_FROM_GREETING $GET_USERNAME_FROM_GREETING
  USERNAME="${GET_USERNAME_FROM_GREETING}"
  enforce_variable_with_value USERNAME $USERNAME


} 
fi 

echo -en "\033[38;5;39m" 2>&1
git config --global user.email "${GET_EMAIL_FROM_PUB_KEY}"
echo -en "\033[38;5;45m" 2>&1
git config --global user.name "${USERNAME}"
echo -en "\033[38;5;51m" 2>&1
OUTPUT_GITCONFIG=$(git config --global -l )
echo -n "$OUTPUT_GITCONFIG" | grep "user."
(( DEBUG )) && sudo ssh-add -l
echo -en "\033[0m" 2>&1
# git config -l
#
# echo " "
# echo "ls -la ${OUTPUT_FOLDER}"
# echo " "
# ls -la ${OUTPUT_FOLDER}
